From d167cb4fb29215cbefb3d0688097b32acc643d50 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Wed, 29 Nov 2023 18:21:00 -0500
Subject: [PATCH] Always On Lateral

Safety code for Always On Lateral. On supported cars this allows lateral
commands to be sent in situations where longitudinal commands are not
allowed. Supports alt experience flags to ensure stock behavior when
always on lateral is not enabled.
---
 board/safety.h                       | 39 ++++++++++++++++++++++++----
 board/safety/safety_chrysler.h       |  3 +++
 board/safety/safety_ford.h           |  3 +++
 board/safety/safety_gm.h             |  3 +++
 board/safety/safety_honda.h          |  6 ++++-
 board/safety/safety_hyundai_common.h |  6 +++++
 board/safety/safety_mazda.h          |  3 +++
 board/safety/safety_nissan.h         | 13 ++++++++++
 board/safety/safety_subaru.h         |  3 +++
 board/safety/safety_tesla.h          | 10 +++++++
 board/safety/safety_toyota.h         | 11 ++++++++
 board/safety_declarations.h          |  7 +++++
 python/__init__.py                   |  3 +++
 13 files changed, 104 insertions(+), 6 deletions(-)

diff --git a/board/safety.h b/board/safety.h
index abff1ada..e7b3bd10 100644
--- a/board/safety.h
+++ b/board/safety.h
@@ -557,8 +557,18 @@ bool longitudinal_interceptor_checks(CANPacket_t *to_send) {
 bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLimits limits) {
   bool violation = false;
   uint32_t ts = microsecond_timer_get();
+  // PFEIFER - AOL {{
+  bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_ENABLE_ALWAYS_ON_LATERAL);
+  if(controls_allowed) {
+    // acc main must be on if controls are allowed
+    acc_main_on = controls_allowed;
+  }
+  // }} PFEIFER - AOL
 
-  if (controls_allowed) {
+  //if (controls_allowed) {
+  // PFEIFER - AOL {{
+  if (controls_allowed || aol_allowed) {
+  // }} PFEIFER - AOL
     // *** global torque limit check ***
     violation |= max_limit_check(desired_torque, limits.max_steer, -limits.max_steer);
 
@@ -585,7 +595,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // no torque if controls is not allowed
-  if (!controls_allowed && (desired_torque != 0)) {
+  // if (!controls_allowed && (desired_torque != 0)) {
+  // PFEIFER - AOL {{
+  if (!(controls_allowed || aol_allowed) && (desired_torque != 0)) {
+  // }} PFEIFER - AOL
     violation = true;
   }
 
@@ -627,7 +640,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // reset to 0 if either controls is not allowed or there's a violation
-  if (violation || !controls_allowed) {
+  // if (violation || !controls_allowed) {
+  // PFEIFER - AOL {{
+  if (violation || !(controls_allowed || aol_allowed)) {
+  // }} PFEIFER - AOL
     valid_steer_req_count = 0;
     invalid_steer_req_count = 0;
     desired_torque_last = 0;
@@ -642,8 +658,18 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
 // Safety checks for angle-based steering commands
 bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const SteeringLimits limits) {
   bool violation = false;
+  // PFEIFER - AOL {{
+  bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_ENABLE_ALWAYS_ON_LATERAL);
+  if(controls_allowed) {
+    // acc main must be on if controls are allowed
+    acc_main_on = controls_allowed;
+  }
+  // }} PFEIFER - AOL
 
-  if (controls_allowed && steer_control_enabled) {
+  // if (controls_allowed && steer_control_enabled) {
+  // PFEIFER - AOL {{
+  if ((controls_allowed || aol_allowed) && steer_control_enabled) {
+  // }} PFEIFER - AOL
     // convert floating point angle rate limits to integers in the scale of the desired angle on CAN,
     // add 1 to not false trigger the violation. also fudge the speed by 1 m/s so rate limits are
     // always slightly above openpilot's in case we read an updated speed in between angle commands
@@ -686,7 +712,10 @@ bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const
   }
 
   // No angle control allowed when controls are not allowed
-  violation |= !controls_allowed && steer_control_enabled;
+  // violation |= !controls_allowed && steer_control_enabled;
+  // PFEIFER - AOL {{
+  violation |= !(controls_allowed || aol_allowed) && steer_control_enabled;
+  // }} PFEIFER - AOL
 
   return violation;
 }
diff --git a/board/safety/safety_chrysler.h b/board/safety/safety_chrysler.h
index d2618122..914b29e3 100644
--- a/board/safety/safety_chrysler.h
+++ b/board/safety/safety_chrysler.h
@@ -185,6 +185,9 @@ static void chrysler_rx_hook(CANPacket_t *to_push) {
   // enter controls on rising edge of ACC, exit controls on ACC off
   const int das_3_bus = (chrysler_platform == CHRYSLER_PACIFICA) ? 0 : 2;
   if ((bus == das_3_bus) && (addr == chrysler_addrs->DAS_3)) {
+    // PFEIFER - AOL {{
+    acc_main_on = GET_BIT(to_push, 20U) == 1U;
+      // }} PFEIFER - AOL
     bool cruise_engaged = GET_BIT(to_push, 21U) == 1U;
     pcm_cruise_check(cruise_engaged);
   }
diff --git a/board/safety/safety_ford.h b/board/safety/safety_ford.h
index 13d17ca1..32103ce0 100644
--- a/board/safety/safety_ford.h
+++ b/board/safety/safety_ford.h
@@ -250,6 +250,9 @@ static void ford_rx_hook(CANPacket_t *to_push) {
 
       // Signal: CcStat_D_Actl
       unsigned int cruise_state = GET_BYTE(to_push, 1) & 0x07U;
+      // PFEIFER - AOL {{
+      acc_main_on = (cruise_state == 3U) ||(cruise_state == 4U) || (cruise_state == 5U);
+      // }} PFEIFER - AOL
       bool cruise_engaged = (cruise_state == 4U) || (cruise_state == 5U);
       pcm_cruise_check(cruise_engaged);
     }
diff --git a/board/safety/safety_gm.h b/board/safety/safety_gm.h
index bd8210b5..dcc85383 100644
--- a/board/safety/safety_gm.h
+++ b/board/safety/safety_gm.h
@@ -108,6 +108,9 @@ static void gm_rx_hook(CANPacket_t *to_push) {
     }
 
     if ((addr == 0xC9) && (gm_hw == GM_CAM)) {
+      // PFEIFER - AOL {{
+      acc_main_on = GET_BIT(to_push, 29U) != 0U;
+      // }} PFEIFER - AOL
       brake_pressed = GET_BIT(to_push, 40U) != 0U;
     }
 
diff --git a/board/safety/safety_honda.h b/board/safety/safety_honda.h
index 30215c02..e16693ab 100644
--- a/board/safety/safety_honda.h
+++ b/board/safety/safety_honda.h
@@ -311,7 +311,11 @@ static bool honda_tx_hook(CANPacket_t *to_send) {
 
   // STEER: safety check
   if ((addr == 0xE4) || (addr == 0x194)) {
-    if (!controls_allowed) {
+    // if (!controls_allowed) {
+    // PFEIFER - AOL {{
+    bool aol_allowed = acc_main_on && (alternative_experience & ALT_EXP_DISABLE_DISENGAGE_ON_GAS);
+    if (!(controls_allowed || aol_allowed)) {
+    // }}
       bool steer_applied = GET_BYTE(to_send, 0) | GET_BYTE(to_send, 1);
       if (steer_applied) {
         tx = false;
diff --git a/board/safety/safety_hyundai_common.h b/board/safety/safety_hyundai_common.h
index 0b9116d1..edc71f74 100644
--- a/board/safety/safety_hyundai_common.h
+++ b/board/safety/safety_hyundai_common.h
@@ -63,6 +63,12 @@ void hyundai_common_cruise_state_check(const int cruise_engaged) {
 }
 
 void hyundai_common_cruise_buttons_check(const int cruise_button, const int main_button) {
+  // PFEIFER - AOL {{
+  if(main_button != 0 && main_button != cruise_main_prev) {
+    acc_main_on = !acc_main_on;
+  }
+  cruise_main_prev = main_button;
+  // }} PFEIFER - AOL
   if ((cruise_button == HYUNDAI_BTN_RESUME) || (cruise_button == HYUNDAI_BTN_SET) || (cruise_button == HYUNDAI_BTN_CANCEL) ||
       (main_button != 0)) {
     hyundai_last_button_interaction = 0U;
diff --git a/board/safety/safety_mazda.h b/board/safety/safety_mazda.h
index 83e76062..04f2f963 100644
--- a/board/safety/safety_mazda.h
+++ b/board/safety/safety_mazda.h
@@ -52,6 +52,9 @@ static void mazda_rx_hook(CANPacket_t *to_push) {
 
     // enter controls on rising edge of ACC, exit controls on ACC off
     if (addr == MAZDA_CRZ_CTRL) {
+      // PFEIFER - AOL {{
+      acc_main_on = GET_BIT(to_push, 17U);
+      // }} PFEIFER - AOL
       bool cruise_engaged = GET_BYTE(to_push, 0) & 0x8U;
       pcm_cruise_check(cruise_engaged);
     }
diff --git a/board/safety/safety_nissan.h b/board/safety/safety_nissan.h
index 4bddc065..7a2f6bf4 100644
--- a/board/safety/safety_nissan.h
+++ b/board/safety/safety_nissan.h
@@ -21,6 +21,10 @@ const CanMsg NISSAN_TX_MSGS[] = {
 
 // Signals duplicated below due to the fact that these messages can come in on either CAN bus, depending on car model.
 RxCheck nissan_rx_checks[] = {
+  // PFEIFER - AOL {{
+  {.msg = {{0x1b6, 0, 8, .expected_timestep = 10000U},
+           {0x1b6, 1, 8, .expected_timestep = 10000U}, { 0 }}},  // PRO_PILOT (100HZ)
+  // }} PFEIFER - AOL
   {.msg = {{0x2, 0, 5, .expected_timestep = 10000U},
            {0x2, 1, 5, .expected_timestep = 10000U}, { 0 }}},  // STEER_ANGLE_SENSOR (100Hz)
   {.msg = {{0x285, 0, 8, .expected_timestep = 20000U},
@@ -64,11 +68,20 @@ static void nissan_rx_hook(CANPacket_t *to_push) {
       update_sample(&vehicle_speed, ROUND((right_rear + left_rear) / 2.0 * 0.005 / 3.6 * VEHICLE_SPEED_FACTOR));
     }
 
+    // PFEIFER - AOL {{
+    if (addr == 0x1b6) {
+      acc_main_on = GET_BIT(to_push, 36U);
+    }
+    // }} PFEIFER - AOL
+
     // X-Trail 0x15c, Leaf 0x239
     if ((addr == 0x15c) || (addr == 0x239)) {
       if (addr == 0x15c){
         gas_pressed = ((GET_BYTE(to_push, 5) << 2) | ((GET_BYTE(to_push, 6) >> 6) & 0x3U)) > 3U;
       } else {
+        // PFEIFER - AOL {{
+        acc_main_on = GET_BIT(to_push, 17U);
+        // }} PFEIFER - AOL
         gas_pressed = GET_BYTE(to_push, 0) > 3U;
       }
     }
diff --git a/board/safety/safety_subaru.h b/board/safety/safety_subaru.h
index b70180c9..7619f997 100644
--- a/board/safety/safety_subaru.h
+++ b/board/safety/safety_subaru.h
@@ -152,6 +152,9 @@ static void subaru_rx_hook(CANPacket_t *to_push) {
 
   // enter controls on rising edge of ACC, exit controls on ACC off
   if ((addr == MSG_SUBARU_CruiseControl) && (bus == alt_main_bus)) {
+    // PFEIFER - AOL {{
+    acc_main_on = GET_BIT(to_push, 40U) != 0U;
+    // }} PFEIFER - AOL
     bool cruise_engaged = GET_BIT(to_push, 41U) != 0U;
     pcm_cruise_check(cruise_engaged);
   }
diff --git a/board/safety/safety_tesla.h b/board/safety/safety_tesla.h
index 17969f74..a60fca70 100644
--- a/board/safety/safety_tesla.h
+++ b/board/safety/safety_tesla.h
@@ -88,6 +88,16 @@ static void tesla_rx_hook(CANPacket_t *to_push) {
     if(addr == (tesla_powertrain ? 0x256 : 0x368)) {
       // Cruise state
       int cruise_state = (GET_BYTE(to_push, 1) >> 4);
+
+      // PFEIFER - AOL {{
+      acc_main_on = (cruise_state == 1) ||  // STANDBY
+        (cruise_state == 2) ||  // ENABLED
+        (cruise_state == 3) ||  // STANDSTILL
+        (cruise_state == 4) ||  // OVERRIDE
+        (cruise_state == 6) ||  // PRE_FAULT
+        (cruise_state == 7);    // PRE_CANCEL
+      // }} PFEIFER - AOL
+
       bool cruise_engaged = (cruise_state == 2) ||  // ENABLED
                             (cruise_state == 3) ||  // STANDSTILL
                             (cruise_state == 4) ||  // OVERRIDE
diff --git a/board/safety/safety_toyota.h b/board/safety/safety_toyota.h
index 4a9326c7..7567a1b3 100644
--- a/board/safety/safety_toyota.h
+++ b/board/safety/safety_toyota.h
@@ -30,12 +30,18 @@ const int TOYOTA_GAS_INTERCEPTOR_THRSLD = 805;
 const CanMsg TOYOTA_TX_MSGS[] = {{0x283, 0, 7}, {0x2E6, 0, 8}, {0x2E7, 0, 8}, {0x33E, 0, 7}, {0x344, 0, 8}, {0x365, 0, 7}, {0x366, 0, 7}, {0x4CB, 0, 8},  // DSU bus 0
                                  {0x128, 1, 6}, {0x141, 1, 4}, {0x160, 1, 8}, {0x161, 1, 7}, {0x470, 1, 4},  // DSU bus 1
                                  {0x2E4, 0, 5}, {0x191, 0, 8}, {0x411, 0, 8}, {0x412, 0, 8}, {0x343, 0, 8}, {0x1D2, 0, 8},  // LKAS + ACC
+                                 // PFEIFER - AOL {{
+                                 {0x1D3, 0, 8},
+                                 // }} PFEIFER - AOL
                                  {0x200, 0, 6}};  // interceptor
 
 RxCheck toyota_rx_checks[] = {
   {.msg = {{ 0xaa, 0, 8, .check_checksum = false, .expected_timestep = 12000U}, { 0 }, { 0 }}},
   {.msg = {{0x260, 0, 8, .check_checksum = true, .expected_timestep = 20000U}, { 0 }, { 0 }}},
   {.msg = {{0x1D2, 0, 8, .check_checksum = true, .expected_timestep = 30000U}, { 0 }, { 0 }}},
+  // PFEIFER - AOL {{
+  {.msg = {{0x1D3, 0, 8, .check_checksum = true, .expected_timestep = 30000U}, { 0 }, { 0 }}},
+  // }} PFEIFER - AOL
   {.msg = {{0x224, 0, 8, .check_checksum = false, .expected_timestep = 25000U},
            {0x226, 0, 8, .check_checksum = false, .expected_timestep = 25000U}, { 0 }}},
 };
@@ -87,6 +93,11 @@ static void toyota_rx_hook(CANPacket_t *to_push) {
       torque_meas.min--;
       torque_meas.max++;
     }
+    // PFEIFER - AOL {{
+    if (addr == 0x1D3) {
+      acc_main_on = GET_BIT(to_push, 15U);
+    }
+    // }} PFEIFER - AOL
 
     // enter controls on rising edge of ACC, exit controls on ACC off
     // exit controls on rising edge of gas press
diff --git a/board/safety_declarations.h b/board/safety_declarations.h
index 94426ea8..f24304ae 100644
--- a/board/safety_declarations.h
+++ b/board/safety_declarations.h
@@ -224,6 +224,9 @@ struct sample_t vehicle_speed;
 bool vehicle_moving = false;
 bool acc_main_on = false;  // referred to as "ACC off" in ISO 15622:2018
 int cruise_button_prev = 0;
+// PFEIFER - AOL {{
+int cruise_main_prev = 0;
+// }} PFEIFER - AOL
 bool safety_rx_checks_invalid = false;
 
 // for safety modes with torque steering control
@@ -266,3 +269,7 @@ int alternative_experience = 0;
 uint32_t safety_mode_cnt = 0U;
 // allow 1s of transition timeout after relay changes state before assessing malfunctioning
 const uint32_t RELAY_TRNS_TIMEOUT = 1U;
+
+// PFEIFER - AOL {{
+#define ALT_EXP_ENABLE_ALWAYS_ON_LATERAL 16
+// }} PFEIFER - AOL
diff --git a/python/__init__.py b/python/__init__.py
index 274e7dbe..8eb471b7 100644
--- a/python/__init__.py
+++ b/python/__init__.py
@@ -111,6 +111,9 @@ class ALTERNATIVE_EXPERIENCE:
   DISABLE_DISENGAGE_ON_GAS = 1
   DISABLE_STOCK_AEB = 2
   RAISE_LONGITUDINAL_LIMITS_TO_ISO_MAX = 8
+  # PFEIFER - AOL {{
+  ENABLE_ALWAYS_ON_LATERAL = 16
+  # }} PFEIFER - AOL
 
 class Panda:
 
-- 
2.39.2

