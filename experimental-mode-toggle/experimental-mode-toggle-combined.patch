From d820e51e0cad62ef1e2172bb891266a89048d07b Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 10 Jun 2023 15:04:21 -0400
Subject: [PATCH 1/3] button manager

---
 selfdrive/controls/button_manager.py | 214 +++++++++++++++++++++++++++
 1 file changed, 214 insertions(+)
 create mode 100644 selfdrive/controls/button_manager.py

diff --git a/selfdrive/controls/button_manager.py b/selfdrive/controls/button_manager.py
new file mode 100644
index 000000000..dee8f649a
--- /dev/null
+++ b/selfdrive/controls/button_manager.py
@@ -0,0 +1,214 @@
+# PFEIFER - BM
+
+from common.params import Params
+from enum import IntEnum
+from time import time
+import json
+
+mem_params = Params("/dev/shm/params")
+
+LONG_PRESS_LENGTH = 0.4 #s
+PRESS_INTERVAL = 0.2 #s
+DEBOUNCE_LENGTH = 0.03 #s
+
+class ButtonState(IntEnum):
+  VOID = 0
+  WAITING_SINGLE_RELEASE = 1
+  LONG_PRESS_WAITING_RELEASE = 2
+  LONG_PRESS = 3
+  SINGLE_PRESS_WAITING_DOUBLE = 4
+  SINGLE_PRESS = 5
+  DOUBLE_PRESS_WAITING_RELEASE = 6
+  DOUBLE_PRESS_WAITING_TRIPLE = 7
+  DOUBLE_PRESS = 8
+  TRIPLE_PRESS_WAITING_RELEASE = 9
+  TRIPLE_PRESS = 10
+
+simple_states = [ButtonState.VOID, ButtonState.LONG_PRESS, ButtonState.SINGLE_PRESS, ButtonState.DOUBLE_PRESS, ButtonState.TRIPLE_PRESS]
+
+class Button:
+  name: str
+  state: ButtonState = ButtonState.VOID
+  transition_id: int = 0
+  last_transition_time: float = time()
+
+  def __init__(self, name: str) -> None:
+    self.name = name
+
+    self.write_state()
+
+    self.state_transition = {
+      ButtonState.VOID: self.update_void_state,
+      ButtonState.WAITING_SINGLE_RELEASE: self.update_waiting_single_release_state,
+      ButtonState.LONG_PRESS_WAITING_RELEASE: self.update_long_press_waiting_release_state,
+      ButtonState.LONG_PRESS: self.update_long_press_state,
+      ButtonState.SINGLE_PRESS_WAITING_DOUBLE: self.update_single_press_waiting_double_state,
+      ButtonState.SINGLE_PRESS: self.update_single_press_state,
+      ButtonState.DOUBLE_PRESS_WAITING_RELEASE: self.update_double_press_waiting_release_state,
+      ButtonState.DOUBLE_PRESS_WAITING_TRIPLE: self.update_double_press_waiting_triple_state,
+      ButtonState.DOUBLE_PRESS: self.update_double_press_state,
+      ButtonState.TRIPLE_PRESS_WAITING_RELEASE: self.update_triple_press_waiting_release_state,
+      ButtonState.TRIPLE_PRESS: self.update_triple_press_state,
+    }
+
+  def update_transition_time(self) -> None:
+    self.last_transition_time = time()
+
+  def press_interval_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > PRESS_INTERVAL
+
+  def long_press_length_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > LONG_PRESS_LENGTH
+
+  def debounce_length_elapsed(self) -> bool:
+    return (time() - self.last_transition_time) > DEBOUNCE_LENGTH
+
+
+  @property
+  def simple_state(self) -> ButtonState:
+    """
+    For most transitional states this returns void. For transitional states that
+    only have a single possible final state this returns the final state.
+    Possible output states are the following: VOID, LONG_PRESS, SINGLE_PRESS,
+    DOUBLE_PRESS, TRIPLE_PRESS
+    """
+    if self.state in simple_states:
+      return self.state
+
+    if self.state == ButtonState.TRIPLE_PRESS_WAITING_RELEASE:
+      return ButtonState.TRIPLE_PRESS
+
+    if self.state == ButtonState.LONG_PRESS_WAITING_RELEASE:
+      return ButtonState.LONG_PRESS
+
+    return ButtonState.VOID
+
+  @property
+  def simple_transition_id(self) -> int:
+    """
+    If a state only has a single possible final state this returns the next
+    transition id, otherwise it responds with the current transition id. Useful
+    For determining changes in simple state.
+    """
+    if self.state == ButtonState.TRIPLE_PRESS_WAITING_RELEASE:
+      return self.transition_id + 1
+
+    if self.state == ButtonState.LONG_PRESS_WAITING_RELEASE:
+      return self.transition_id + 1
+
+    return self.transition_id
+
+  @property
+  def dict(self):
+    return {
+      "state": int(self.state),
+      "transition_id": self.transition_id,
+      "last_transition_time": self.last_transition_time
+    }
+
+  def write_state(self) -> None:
+    mem_params.put(self.name, json.dumps(self.dict))
+
+  def load_state(self) -> None:
+    try:
+      state_dict = json.loads(mem_params.get(self.name))
+      self.state = ButtonState(state_dict["state"])
+      self.transition_id = state_dict["transition_id"]
+      self.last_transition_time = state_dict["last_transition_time"]
+    except:
+      self.state = ButtonState.VOID
+      self.transition_id = 0
+      self.last_transition_time = time()
+
+  def update(self, button_pressed: bool, load_state = True, write_state = True) -> ButtonState:
+    if load_state:
+      self.load_state()
+
+    if not self.debounce_length_elapsed():
+      return self.state
+
+    state = self.state_transition[self.state](button_pressed)
+
+    if self.state != state:
+      self.state = state
+      self.transition_id += 1
+      self.update_transition_time()
+      if write_state:
+        self.write_state()
+
+    return self.state
+
+  # ---------------- STATE TRANSITIONS ----------------------------
+  def update_void_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_waiting_single_release_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed and self.long_press_length_elapsed():
+      return ButtonState.LONG_PRESS_WAITING_RELEASE
+
+    if not button_pressed:
+      return ButtonState.SINGLE_PRESS_WAITING_DOUBLE
+
+    return self.state
+
+  def update_long_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed:
+      return ButtonState.LONG_PRESS
+
+    return self.state
+
+  def update_long_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_single_press_waiting_double_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed and self.press_interval_elapsed():
+      return ButtonState.SINGLE_PRESS
+
+    if button_pressed:
+      return ButtonState.DOUBLE_PRESS_WAITING_RELEASE
+
+    return self.state
+
+  def update_single_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
+
+  def update_double_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+      if not button_pressed:
+        return ButtonState.DOUBLE_PRESS_WAITING_TRIPLE
+
+      return self.state
+
+  def update_double_press_waiting_triple_state(self, button_pressed: bool) -> ButtonState:
+      if not button_pressed and self.press_interval_elapsed():
+        return ButtonState.DOUBLE_PRESS
+      if button_pressed:
+        return ButtonState.TRIPLE_PRESS_WAITING_RELEASE
+
+      return self.state
+
+  def update_double_press_state(self, button_pressed: bool) -> ButtonState:
+      if button_pressed:
+        return ButtonState.WAITING_SINGLE_RELEASE
+
+      return self.state
+
+  def update_triple_press_waiting_release_state(self, button_pressed: bool) -> ButtonState:
+    if not button_pressed:
+        return ButtonState.TRIPLE_PRESS
+
+    return self.state
+
+  def update_triple_press_state(self, button_pressed: bool) -> ButtonState:
+    if button_pressed:
+      return ButtonState.WAITING_SINGLE_RELEASE
+
+    return self.state
-- 
2.41.0


From 0b31b3743a3de71c8c3ac7513e1f99b7c2788083 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 24 Jun 2023 17:59:36 -0400
Subject: [PATCH 2/3] gap adjust button

---
 common/params.cc                        |  4 ++++
 selfdrive/car/gm/carstate.py            |  9 +++++++++
 selfdrive/car/hyundai/interface.py      |  9 +++++++++
 selfdrive/car/toyota/carstate.py        | 13 +++++++++++++
 selfdrive/controls/gap_adjust_button.py | 13 +++++++++++++
 5 files changed, 48 insertions(+)
 create mode 100644 selfdrive/controls/gap_adjust_button.py

diff --git a/common/params.cc b/common/params.cc
index e8ab42c0b..f09fbb2ab 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -206,6 +206,10 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"Version", PERSISTENT},
     {"VisionRadarToggle", PERSISTENT},
     {"WheeledBody", PERSISTENT},
+
+    // PFEIFER - GAB {{
+    {"GapAdjustButton", PERSISTENT},
+    // }} PFEIFER - GAB
 };
 
 } // namespace
diff --git a/selfdrive/car/gm/carstate.py b/selfdrive/car/gm/carstate.py
index 43cdee18d..85fa379b2 100644
--- a/selfdrive/car/gm/carstate.py
+++ b/selfdrive/car/gm/carstate.py
@@ -7,6 +7,10 @@ from opendbc.can.parser import CANParser
 from selfdrive.car.interfaces import CarStateBase
 from selfdrive.car.gm.values import DBC, AccState, CanBus, STEER_THRESHOLD
 
+# PFEIFER - GAB {{
+from selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 TransmissionType = car.CarParams.TransmissionType
 NetworkLocation = car.CarParams.NetworkLocation
 STANDSTILL_THRESHOLD = 10 * 0.0311 * CV.KPH_TO_MS
@@ -29,6 +33,11 @@ class CarState(CarStateBase):
   def update(self, pt_cp, cam_cp, loopback_cp):
     ret = car.CarState.new_message()
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = pt_cp.vl["ASCMSteeringButton"]["DistanceButton"] != 0
+    gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     self.prev_cruise_buttons = self.cruise_buttons
     self.cruise_buttons = pt_cp.vl["ASCMSteeringButton"]["ACCButtons"]
     self.buttons_counter = pt_cp.vl["ASCMSteeringButton"]["RollingCounter"]
diff --git a/selfdrive/car/hyundai/interface.py b/selfdrive/car/hyundai/interface.py
index 46f86fdc1..ee3659565 100644
--- a/selfdrive/car/hyundai/interface.py
+++ b/selfdrive/car/hyundai/interface.py
@@ -10,6 +10,10 @@ from selfdrive.car import STD_CARGO_KG, create_button_event, scale_tire_stiffnes
 from selfdrive.car.interfaces import CarInterfaceBase
 from selfdrive.car.disable_ecu import disable_ecu
 
+# PFEIFER - GAB {{
+from selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 Ecu = car.CarParams.Ecu
 ButtonType = car.CarState.ButtonEvent.Type
 EventName = car.CarEvent.EventName
@@ -331,6 +335,11 @@ class CarInterface(CarInterfaceBase):
 
       ret.buttonEvents = buttonEvents
 
+    # PFEIFER - GAB {{
+    gap_button_pressed = (self.CS.cruise_buttons[-1] == Buttons.GAP_DIST)
+    gap_adjust_button.update(gap_button_pressed)
+    # }} PFEIFER - GAB
+
     # On some newer model years, the CANCEL button acts as a pause/resume button based on the PCM state
     # To avoid re-engaging when openpilot cancels, check user engagement intention via buttons
     # Main button also can trigger an engagement on these cars
diff --git a/selfdrive/car/toyota/carstate.py b/selfdrive/car/toyota/carstate.py
index 8a75ab427..f8b795262 100644
--- a/selfdrive/car/toyota/carstate.py
+++ b/selfdrive/car/toyota/carstate.py
@@ -10,6 +10,10 @@ from opendbc.can.parser import CANParser
 from selfdrive.car.interfaces import CarStateBase
 from selfdrive.car.toyota.values import ToyotaFlags, CAR, DBC, STEER_THRESHOLD, NO_STOP_TIMER_CAR, TSS2_CAR, RADAR_ACC_CAR, EPS_SCALE, UNSUPPORTED_DSU_CAR
 
+# PFEIFER - GAB {{
+from selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 SteerControlType = car.CarParams.SteerControlType
 
 # These steering fault definitions seem to be common across LKA (torque) and LTA (angle):
@@ -162,6 +166,15 @@ class CarState(CarStateBase):
     if self.CP.carFingerprint != CAR.PRIUS_V:
       self.lkas_hud = copy.copy(cp_cam.vl["LKAS_HUD"])
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = False
+    if self.CP.carFingerprint in (TSS2_CAR - RADAR_ACC_CAR):
+      distance_button_pressed = cp_cam.vl["ACC_CONTROL"]["DISTANCE"] == 1
+    elif self.CP.carFingerprint in RADAR_ACC_CAR:
+      distance_button_pressed = cp.vl["ACC_CONTROL"]["DISTANCE"] == 1
+    gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     return ret
 
   @staticmethod
diff --git a/selfdrive/controls/gap_adjust_button.py b/selfdrive/controls/gap_adjust_button.py
new file mode 100644
index 000000000..af2b3e645
--- /dev/null
+++ b/selfdrive/controls/gap_adjust_button.py
@@ -0,0 +1,13 @@
+# PFEIFER - GAB
+
+# Acknowledgements:
+# HKG button state was pulled from sunnypilot. https://github.com/sunnyhaibin/sunnypilot
+# GM button state was pulled from OPGM. https://github.com/opgm/openpilot
+# Toyota button state was pulled from Frogpilot who pulled it from krkeegan. https://github.com/FrogAi/FrogPilot | https://github.com/krkeegan/openpilot
+
+from selfdrive.controls.button_manager import Button, ButtonState
+
+# export button state so only one import is necessary
+GapButtonState = ButtonState
+
+gap_adjust_button = Button("GapAdjustButton")
-- 
2.41.0


From 4fd86dd495afcaf171ec09f04ae42f40d10f5b9f Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 10 Jun 2023 17:18:00 -0400
Subject: [PATCH 3/3] experimental mode toggle

---
 selfdrive/controls/controlsd.py               |  8 ++++
 .../controls/experimental_mode_toggle.py      | 41 +++++++++++++++++++
 2 files changed, 49 insertions(+)
 create mode 100644 selfdrive/controls/experimental_mode_toggle.py

diff --git a/selfdrive/controls/controlsd.py b/selfdrive/controls/controlsd.py
index 8084b18ff..f8a88b388 100755
--- a/selfdrive/controls/controlsd.py
+++ b/selfdrive/controls/controlsd.py
@@ -28,6 +28,10 @@ from selfdrive.controls.lib.alertmanager import AlertManager, set_offroad_alert
 from selfdrive.controls.lib.vehicle_model import VehicleModel
 from system.hardware import HARDWARE
 
+# PFEIFER - EMT {{
+from selfdrive.controls.experimental_mode_toggle import emt
+# }} PFEIFER - EMT
+
 SOFT_DISABLE_TIME = 3  # seconds
 LDW_MIN_SPEED = 31 * CV.MPH_TO_MS
 LANE_DEPARTURE_THRESHOLD = 0.1
@@ -856,6 +860,10 @@ class Controls:
     self.update_events(CS)
     cloudlog.timestamp("Events updated")
 
+    # PFEIFER - EMT {{
+    emt.update()
+    # }} PFEIFER - EMT
+
     if not self.read_only and self.initialized:
       # Update control state
       self.state_transition(CS)
diff --git a/selfdrive/controls/experimental_mode_toggle.py b/selfdrive/controls/experimental_mode_toggle.py
new file mode 100644
index 000000000..2614eb788
--- /dev/null
+++ b/selfdrive/controls/experimental_mode_toggle.py
@@ -0,0 +1,41 @@
+# PFEIFER - EMT
+
+from common.params import Params, put_bool_nonblocking
+from selfdrive.controls.gap_adjust_button import gap_adjust_button, GapButtonState
+
+params = Params()
+
+class ExperimentalModeToggle:
+  button_transition_id = 0
+  state: bool
+
+  def __init__(self) -> None:
+    self.load_state()
+
+  def load_state(self) -> None:
+    try:
+      self.state = params.get_bool("ExperimentalMode")
+    except:
+      self.state = False
+
+  def write_state(self) -> None:
+    put_bool_nonblocking('ExperimentalMode', self.state)
+
+  def update(self, load_state=True, write_state=True, load_button_state=True) -> None:
+    if load_button_state:
+      gap_adjust_button.load_state()
+
+    transition_id = gap_adjust_button.simple_transition_id;
+
+    if self.button_transition_id != transition_id:
+      self.button_transition_id = transition_id
+      if gap_adjust_button.simple_state == GapButtonState.LONG_PRESS:
+        if load_state:
+          self.load_state()
+
+        self.state = not self.state
+
+        if write_state:
+          self.write_state()
+
+emt = ExperimentalModeToggle()
-- 
2.41.0

