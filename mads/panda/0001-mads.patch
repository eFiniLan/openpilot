From 668cb7c4cb651725f3eeee967587f0c66c83c51d Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Mon, 27 Mar 2023 21:31:12 -0400
Subject: [PATCH] mads

---
 board/safety.h                       | 33 +++++++++++++++++++++++-----
 board/safety/safety_defaults.h       |  1 +
 board/safety/safety_hyundai_common.h | 10 +++++++++
 board/safety_declarations.h          |  9 ++++++++
 python/__init__.py                   |  4 ++++
 5 files changed, 51 insertions(+), 6 deletions(-)

diff --git a/board/safety.h b/board/safety.h
index 45f76a33..6ae8cbb0 100644
--- a/board/safety.h
+++ b/board/safety.h
@@ -334,6 +334,9 @@ int set_safety_hooks(uint16_t mode, uint16_t param) {
   vehicle_moving = false;
   acc_main_on = false;
   cruise_button_prev = 0;
+  // PFEIFER - mads {{
+  main_button_prev = 0;
+  // }} PFEIFER - mads
   desired_torque_last = 0;
   rt_torque_last = 0;
   ts_angle_last = 0;
@@ -532,7 +535,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   bool violation = false;
   uint32_t ts = microsecond_timer_get();
 
-  if (controls_allowed) {
+//  if (controls_allowed) {
+//  PFEIFER - mads {{
+  if(lateral_controls_allowed) {
+// }} PFEIFER - mads
     // *** global torque limit check ***
     violation |= max_limit_check(desired_torque, limits.max_steer, -limits.max_steer);
 
@@ -559,7 +565,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // no torque if controls is not allowed
-  if (!controls_allowed && (desired_torque != 0)) {
+//  if (!controls_allowed && (desired_torque != 0)) {
+//  PFEIFER - mads {{
+  if(!lateral_controls_allowed && (desired_torque != 0)) {
+//  }} PFEIFER - mads
     violation = true;
   }
 
@@ -601,7 +610,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
   }
 
   // reset to 0 if either controls is not allowed or there's a violation
-  if (violation || !controls_allowed) {
+//  if (violation || !controls_allowed) {
+//  PFEIFER - mads {{
+  if (violation || !lateral_controls_allowed) {
+//  }} PFEIFER - mads
     valid_steer_req_count = 0;
     invalid_steer_req_count = 0;
     desired_torque_last = 0;
@@ -617,7 +629,10 @@ bool steer_torque_cmd_checks(int desired_torque, int steer_req, const SteeringLi
 bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const SteeringLimits limits) {
   bool violation = false;
 
-  if (controls_allowed && steer_control_enabled) {
+//  if (controls_allowed && steer_control_enabled) {
+//  PFEIFER - mads {{
+  if (lateral_controls_allowed && steer_control_enabled) {
+//  }} PFEIFER - mads
     // convert floating point angle rate limits to integers in the scale of the desired angle on CAN,
     // add 1 to not false trigger the violation. also fudge the speed by 1 m/s so rate limits are
     // always slightly above openpilot's in case we read an updated speed in between angle commands
@@ -634,12 +649,18 @@ bool steer_angle_cmd_checks(int desired_angle, bool steer_control_enabled, const
   desired_angle_last = desired_angle;
 
   // Angle should be the same as current angle while not steering
-  violation |= (!controls_allowed &&
+//  violation |= (!controls_allowed &&
+//  PFEIFER - mads {{
+  violation |= (!lateral_controls_allowed &&
+//  }} PFEIFER - mads
                   ((desired_angle < (angle_meas.min - 1)) ||
                   (desired_angle > (angle_meas.max + 1))));
 
   // No angle control allowed when controls are not allowed
-  violation |= !controls_allowed && steer_control_enabled;
+//  violation |= !controls_allowed && steer_control_enabled;
+//  PFEIFER - mads {{
+  violation |= !lateral_controls_allowed && steer_control_enabled;
+//  }} PFEIFER - mads
 
   return violation;
 }
diff --git a/board/safety/safety_defaults.h b/board/safety/safety_defaults.h
index 41c88629..52d31a1e 100644
--- a/board/safety/safety_defaults.h
+++ b/board/safety/safety_defaults.h
@@ -49,6 +49,7 @@ bool alloutput_passthrough = false;
 
 static const addr_checks* alloutput_init(uint16_t param) {
   controls_allowed = true;
+  lateral_controls_allowed = true;
   alloutput_passthrough = GET_FLAG(param, ALLOUTPUT_PARAM_PASSTHROUGH);
   return &default_rx_checks;
 }
diff --git a/board/safety/safety_hyundai_common.h b/board/safety/safety_hyundai_common.h
index 8bd84fea..9e62de98 100644
--- a/board/safety/safety_hyundai_common.h
+++ b/board/safety/safety_hyundai_common.h
@@ -78,7 +78,17 @@ void hyundai_common_cruise_buttons_check(const int cruise_button, const int main
       controls_allowed = 0;
     }
 
+    // PFEIFER - mads {{
+    if (main_button != 0 && main_button_prev == 0) { // main_button was pressed
+      lateral_controls_allowed = (lateral_controls_allowed + 1) % 2; // toggle
+    }
+    if (controls_allowed == 1) { // always allow lateral_controls when long controls are allowed, makes syncing easier
+      lateral_controls_allowed = 1;
+    }
+    // }} PFEIFER - mads
+
     cruise_button_prev = cruise_button;
+    main_button_prev = main_button;
   }
 }
 
diff --git a/board/safety_declarations.h b/board/safety_declarations.h
index 49c8db03..0c97d376 100644
--- a/board/safety_declarations.h
+++ b/board/safety_declarations.h
@@ -167,6 +167,7 @@ void safety_tick(const addr_checks *addr_checks);
 
 // This can be set by the safety hooks
 bool controls_allowed = false;
+bool lateral_controls_allowed = false;
 bool relay_malfunction = false;
 bool gas_interceptor_detected = false;
 int gas_interceptor_prev = 0;
@@ -181,6 +182,9 @@ float vehicle_speed = 0;
 bool vehicle_moving = false;
 bool acc_main_on = false;  // referred to as "ACC off" in ISO 15622:2018
 int cruise_button_prev = 0;
+// PFEIFER - mads {{
+int main_button_prev = 0;
+// }} PFEIFER - mads
 bool safety_rx_checks_invalid = false;
 
 // for safety modes with torque steering control
@@ -223,3 +227,8 @@ int alternative_experience = 0;
 uint32_t safety_mode_cnt = 0U;
 // allow 1s of transition timeout after relay changes state before assessing malfunctioning
 const uint32_t RELAY_TRNS_TIMEOUT = 1U;
+
+// PFEIFER - mads {{
+#define ALT_EXP_ENABLE_MADS 16
+#define ALT_EXP_MADS_DISABLE_DISENGAGE_LATERAL_ON_BRAKE 32
+// }} PFEIFER - mads
diff --git a/python/__init__.py b/python/__init__.py
index 1b8495f4..a9b132b9 100644
--- a/python/__init__.py
+++ b/python/__init__.py
@@ -127,6 +127,10 @@ class ALTERNATIVE_EXPERIENCE:
   DISABLE_DISENGAGE_ON_GAS = 1
   DISABLE_STOCK_AEB = 2
   RAISE_LONGITUDINAL_LIMITS_TO_ISO_MAX = 8
+  # PFEIFER - mads {{
+  ENABLE_MADS = 16
+  MADS_DISABLE_DISENGAGE_LATERAL_ON_BRAKE = 32
+  # }} PFEIFER - mads
 
 class Panda:
 
-- 
2.40.0

