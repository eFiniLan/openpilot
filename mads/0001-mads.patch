From b971306a9173022d604b891779ef0a35b88104dc Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Thu, 30 Mar 2023 12:42:16 -0400
Subject: [PATCH] mads

---
 common/params.cc                    |  7 +++
 panda                               |  2 +-
 selfdrive/car/hyundai/carstate.py   | 13 +++++
 selfdrive/car/interfaces.py         |  4 ++
 selfdrive/controls/controlsd.py     | 13 ++++-
 selfdrive/controls/mads.py          | 89 +++++++++++++++++++++++++++++
 selfdrive/ui/qt/offroad/settings.cc | 20 +++++++
 selfdrive/ui/qt/onroad.cc           |  7 +++
 selfdrive/ui/qt/onroad.h            |  3 +
 selfdrive/ui/ui.h                   |  6 ++
 10 files changed, 162 insertions(+), 2 deletions(-)
 create mode 100644 selfdrive/controls/mads.py

diff --git a/common/params.cc b/common/params.cc
index 428830a11..4de0c4c52 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -202,6 +202,13 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"Offroad_TemperatureTooHigh", CLEAR_ON_MANAGER_START},
     {"Offroad_UnofficialHardware", CLEAR_ON_MANAGER_START},
     {"Offroad_UpdateFailed", CLEAR_ON_MANAGER_START},
+
+// PFEIFER - mads {{
+    {"MadsEnabled", PERSISTENT},
+    {"LateralAllowed", CLEAR_ON_MANAGER_START},
+    {"DisengageLatOnBrake", PERSISTENT},
+    {"DisengageLatOnBlinker", PERSISTENT},
+// }} PFEIFER - mads
 };
 
 } // namespace
diff --git a/panda b/panda
index 878e0077a..c88d12e91 160000
--- a/panda
+++ b/panda
@@ -1 +1 @@
-Subproject commit 878e0077ac077c5325b37710b8df856468d85674
+Subproject commit c88d12e91e7ac309a0996021af7a82a9691365e5
diff --git a/selfdrive/car/hyundai/carstate.py b/selfdrive/car/hyundai/carstate.py
index 22934c05b..7ca2f070a 100644
--- a/selfdrive/car/hyundai/carstate.py
+++ b/selfdrive/car/hyundai/carstate.py
@@ -9,6 +9,7 @@ from opendbc.can.can_define import CANDefine
 from selfdrive.car.hyundai.hyundaicanfd import get_e_can_bus
 from selfdrive.car.hyundai.values import HyundaiFlags, CAR, DBC, FEATURES, CAMERA_SCC_CAR, CANFD_CAR, EV_CAR, HYBRID_CAR, Buttons, CarControllerParams
 from selfdrive.car.interfaces import CarStateBase
+from common.params import Params
 
 PREV_BUTTON_SAMPLES = 8
 CLUSTER_SAMPLE_RATE = 20  # frames
@@ -19,6 +20,10 @@ class CarState(CarStateBase):
     super().__init__(CP)
     can_define = CANDefine(DBC[CP.carFingerprint]["pt"])
 
+    # PFEIFER - mads {{
+    self._params = Params()
+    # }}
+
     self.cruise_buttons = deque([Buttons.NONE] * PREV_BUTTON_SAMPLES, maxlen=PREV_BUTTON_SAMPLES)
     self.main_buttons = deque([Buttons.NONE] * PREV_BUTTON_SAMPLES, maxlen=PREV_BUTTON_SAMPLES)
 
@@ -152,7 +157,15 @@ class CarState(CarStateBase):
     self.steer_state = cp.vl["MDPS12"]["CF_Mdps_ToiActive"]  # 0 NOT ACTIVE, 1 ACTIVE
     self.prev_cruise_buttons = self.cruise_buttons[-1]
     self.cruise_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwState"])
+    # PFEIFER - mads {{
+    self.prev_main_buttons = self.main_buttons[-1]
+    # }} PFEIFER - mads
     self.main_buttons.extend(cp.vl_all["CLU11"]["CF_Clu_CruiseSwMain"])
+    # PFEIFER - mads {{
+    if self.prev_main_buttons == 0 and self.main_buttons[-1] != 0:
+      lateral_allowed = self._params.get_bool("LateralAllowed")
+      self._params.put_bool("LateralAllowed", not lateral_allowed)
+    # }} PFEIFER - mads
 
     return ret
 
diff --git a/selfdrive/car/interfaces.py b/selfdrive/car/interfaces.py
index 8b1159f36..f5fdf51ce 100644
--- a/selfdrive/car/interfaces.py
+++ b/selfdrive/car/interfaces.py
@@ -328,6 +328,10 @@ class CarStateBase(ABC):
     self.car_fingerprint = CP.carFingerprint
     self.out = car.CarState.new_message()
 
+    # PFEIFER - mads {{
+    self.lateral_allowed = False
+    # }} PFEIFER - mads
+
     self.cruise_buttons = 0
     self.left_blinker_cnt = 0
     self.right_blinker_cnt = 0
diff --git a/selfdrive/controls/controlsd.py b/selfdrive/controls/controlsd.py
index 1391d6570..e642cf131 100755
--- a/selfdrive/controls/controlsd.py
+++ b/selfdrive/controls/controlsd.py
@@ -30,6 +30,10 @@ from selfdrive.locationd.calibrationd import Calibration
 from system.hardware import HARDWARE
 from selfdrive.manager.process_config import managed_processes
 
+# PFEIFER - mads {{
+from selfdrive.controls.mads import Mads
+# }} PFEIFER - mads
+
 SOFT_DISABLE_TIME = 3  # seconds
 LDW_MIN_SPEED = 31 * CV.MPH_TO_MS
 LANE_DEPARTURE_THRESHOLD = 0.1
@@ -111,7 +115,10 @@ class Controls:
     self.CP.alternativeExperience = 0
     if not self.disengage_on_accelerator:
       self.CP.alternativeExperience |= ALTERNATIVE_EXPERIENCE.DISABLE_DISENGAGE_ON_GAS
-
+    # PFEIFER - mads {{
+    self.mads = Mads(self.CI)
+    self.CP.alternativeExperience |= self.mads.alternative_experience
+    # }} PFEIFER - mads
     # read params
     self.is_metric = self.params.get_bool("IsMetric")
     self.is_ldw_enabled = self.params.get_bool("IsLdwEnabled")
@@ -576,6 +583,10 @@ class Controls:
     standstill = CS.vEgo <= max(self.CP.minSteerSpeed, MIN_LATERAL_CONTROL_SPEED) or CS.standstill
     CC.latActive = self.active and not CS.steerFaultTemporary and not CS.steerFaultPermanent and \
                    (not standstill or self.joystick_mode)
+    # PFEIFER - mads {{
+    self.mads.update(CS, self.state, self.CP, self.sm, self.AM)
+    CC.latActive = self.mads.lat_active
+    # }} PFEIFER - mads
     CC.longActive = self.enabled and not self.events.any(ET.OVERRIDE_LONGITUDINAL) and self.CP.openpilotLongitudinalControl
 
     actuators = CC.actuators
diff --git a/selfdrive/controls/mads.py b/selfdrive/controls/mads.py
new file mode 100644
index 000000000..1e566c003
--- /dev/null
+++ b/selfdrive/controls/mads.py
@@ -0,0 +1,89 @@
+# PFEIFER - mads
+
+from cereal import log, car
+from common.params import Params
+from selfdrive.controls.lib.latcontrol import MIN_LATERAL_CONTROL_SPEED
+from panda import ALTERNATIVE_EXPERIENCE
+from selfdrive.controls.lib.events import EngagementAlert, AudibleAlert
+
+State = log.ControlsState.OpenpilotState
+ACTIVE_STATES = (State.enabled, State.softDisabling, State.overriding)
+
+class Mads:
+  def __init__(self, CI, braking = False, blinkers_active = False, op_active = False, standstill = False, steer_fault = False, invalid_gear = False):
+    self.CI = CI
+    self.braking = braking
+    self.blinkers_active = blinkers_active
+    self.op_active = op_active
+    self.standstill = standstill
+    self.steer_fault = steer_fault
+    self.invalid_gear = invalid_gear
+    self.last_lat_allowed = False
+
+    self.params = Params()
+
+  def update(self, car_state, op_state, car_params, sm, alert_manager):
+    panda_states = sm['pandaStates']
+    lateral_allowed = self.params.get_bool("LateralAllowed")
+    if self.last_lat_allowed != lateral_allowed:
+      alert = None
+      if lateral_allowed:
+        alert = EngagementAlert(AudibleAlert.engage)
+      else:
+        alert = EngagementAlert(AudibleAlert.disengage)
+      alert_manager.add_many(sm.frame, [alert])
+    self.last_lat_allowed = lateral_allowed
+    self.braking = car_state.brakePressed or car_state.regenBraking
+    self.blinkers_active = car_state.leftBlinker or car_state.rightBlinker
+    self.standstill = car_state.vEgo <= max(car_params.minSteerSpeed, MIN_LATERAL_CONTROL_SPEED) or car_state.standstill
+    self.op_active = op_state in ACTIVE_STATES
+    self.steer_fault = car_state.steerFaultTemporary or car_state.steerFaultPermanent
+    self.car_lat_active = car_state.cruiseState.available
+    self.invalid_gear = car_state.gearShifter not in [car.CarState.GearShifter.drive, car.CarState.GearShifter.neutral, car.CarState.GearShifter.sport, car.CarState.GearShifter.low, car.CarState.GearShifter.eco, car.CarState.GearShifter.manumatic]
+
+    # Always allow lateral when controls are allowed
+    if any(ps.controlsAllowed for ps in panda_states) and not lateral_allowed:
+      self.params.put_bool("LateralAllowed", True)
+
+  @property
+  def lat_active(self):
+
+
+    # If car is in a gear that does not move forward do not engage lateral
+    if self.invalid_gear:
+      return False
+
+    # If there is a steer fault lat is not available
+    if self.steer_fault:
+      return False
+
+    # If the car lateral control is not active lat cannot be active
+    if self.params.get_bool('MadsEnabled') and not self.params.get_bool("LateralAllowed"):
+      return False
+
+    # If mads is disabled then lat is only active when openpilot is active
+    if not self.params.get_bool('MadsEnabled') and not self.op_active:
+      return False
+
+    # If DisengageLatOnBrake is enabled we disable lat when braking
+    if self.params.get_bool('DisengageLatOnBrake') and self.braking:
+      return False
+
+    # If DisengageLatOnBlinker is enabled we disable lat when blinkers are on
+    if self.params.get_bool('DisengageLatOnBlinker') and self.blinkers_active:
+      return False
+
+    # Lat is enabled if we pass all previous tests for disengagement
+    return True
+
+  @property
+  def alternative_experience(self):
+    mads_enabled = self.params.get_bool('MadsEnabled')
+    dlob = self.params.get_bool('DisengageLatOnBrake')
+
+    if mads_enabled and dlob:
+      return ALTERNATIVE_EXPERIENCE.ENABLE_MADS
+    if mads_enabled and not dlob:
+      return ALTERNATIVE_EXPERIENCE.MADS_DISABLE_DISENGAGE_LATERAL_ON_BRAKE
+    return 0
+
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index fd14ed15e..962028089 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -73,6 +73,26 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("When enabled, pressing the accelerator pedal will disengage openpilot."),
       "../assets/offroad/icon_disengage_on_accelerator.svg",
     },
+    // PFEIFER - mads {{
+    {
+      "MadsEnabled",
+      tr("Always on Lateral"),
+      tr("When enabled lateral control will be engaged even when longitudinal is not. Main cruise button toggles lateral control on and off."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "DisengageLatOnBrake",
+      tr("Disengage Lateral on Brake Pedal"),
+      tr("Disables lateral while the brake is being applied. Only changes behavior of Always on Lateral."),
+      "../assets/img_experimental_white.svg",
+    },
+    {
+      "DisengageLatOnBlinker",
+      tr("Disengage Lateral on Blinker"),
+      tr("Disables lateral while a blinker is being activated. Only changes behavior of Always on Lateral."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - mads
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
diff --git a/selfdrive/ui/qt/onroad.cc b/selfdrive/ui/qt/onroad.cc
index 009798a56..a592b4711 100644
--- a/selfdrive/ui/qt/onroad.cc
+++ b/selfdrive/ui/qt/onroad.cc
@@ -52,6 +52,13 @@ OnroadWindow::OnroadWindow(QWidget *parent) : QWidget(parent) {
 
 void OnroadWindow::updateState(const UIState &s) {
   QColor bgColor = bg_colors[s.status];
+  // PFEIFER - mads {{
+  params = Params();
+  if(s.status == STATUS_DISENGAGED && params.getBool("LateralAllowed")){
+      bgColor = bg_colors[STATUS_LAT_ALLOWED];
+  }
+  // }} PFEIFER - mads
+
   Alert alert = Alert::get(*(s.sm), s.scene.started_frame);
   if (s.sm->updated("controlsState") || !alert.equal({})) {
     if (alert.type == "controlsUnresponsive") {
diff --git a/selfdrive/ui/qt/onroad.h b/selfdrive/ui/qt/onroad.h
index 73c2a3789..e7c02f535 100644
--- a/selfdrive/ui/qt/onroad.h
+++ b/selfdrive/ui/qt/onroad.h
@@ -123,6 +123,9 @@ private:
   QColor bg = bg_colors[STATUS_DISENGAGED];
   QWidget *map = nullptr;
   QHBoxLayout* split;
+  // PFEIFER - mads {{
+  Params params;
+  // }} PFEIFER - mads
 
 private slots:
   void offroadTransition(bool offroad);
diff --git a/selfdrive/ui/ui.h b/selfdrive/ui/ui.h
index 4c4bd462e..b0b944d6e 100644
--- a/selfdrive/ui/ui.h
+++ b/selfdrive/ui/ui.h
@@ -85,6 +85,9 @@ typedef enum UIStatus {
   STATUS_ENGAGED,
   STATUS_WARNING,
   STATUS_ALERT,
+  // PFEIFER - mads {{
+  STATUS_LAT_ALLOWED,
+  // }} PFEIFER - mads
 } UIStatus;
 
 const QColor bg_colors [] = {
@@ -93,6 +96,9 @@ const QColor bg_colors [] = {
   [STATUS_ENGAGED] = QColor(0x17, 0x86, 0x44, 0xf1),
   [STATUS_WARNING] = QColor(0xDA, 0x6F, 0x25, 0xf1),
   [STATUS_ALERT] = QColor(0xC9, 0x22, 0x31, 0xf1),
+  // PFEIFER - mads {{
+  [STATUS_LAT_ALLOWED] = QColor(0x6f, 0xc0, 0xc9, 0xf1),
+  // }} PFEIFER - mads
 };
 
 typedef struct UIScene {
-- 
2.40.0

