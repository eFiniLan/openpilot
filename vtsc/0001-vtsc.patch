From 68e6a8d060db5b4f2c53599134de9bf1170f4633 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Fri, 28 Jul 2023 22:32:56 -0400
Subject: [PATCH] vtsc

---
 common/params.cc                              |   4 +
 release/files_common                          |   2 +
 .../controls/lib/longitudinal_planner.py      |  15 ++
 selfdrive/controls/vtsc.py                    | 214 ++++++++++++++++++
 selfdrive/ui/qt/offroad/settings.cc           |   8 +
 5 files changed, 243 insertions(+)
 create mode 100644 selfdrive/controls/vtsc.py

diff --git a/common/params.cc b/common/params.cc
index 6722dbb3e..617332a8c 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -209,6 +209,10 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"Version", PERSISTENT},
     {"VisionRadarToggle", PERSISTENT},
     {"WheeledBody", PERSISTENT},
+
+    // PFEIFER - VTSC {{
+    {"TurnVisionControl", PERSISTENT},
+    // }} PFEIFER - VTSC
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index 2d0b5f051..dd35357c0 100644
--- a/release/files_common
+++ b/release/files_common
@@ -600,3 +600,5 @@ tinygrad_repo/tinygrad/nn/*
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/vtsc.py
diff --git a/selfdrive/controls/lib/longitudinal_planner.py b/selfdrive/controls/lib/longitudinal_planner.py
index c1e782fa5..2da4b420a 100755
--- a/selfdrive/controls/lib/longitudinal_planner.py
+++ b/selfdrive/controls/lib/longitudinal_planner.py
@@ -17,6 +17,10 @@ from openpilot.selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc import T_IDX
 from openpilot.selfdrive.controls.lib.drive_helpers import V_CRUISE_MAX, CONTROL_N, get_speed_error
 from openpilot.system.swaglog import cloudlog
 
+# PFEIFER - VTSC {{
+from openpilot.selfdrive.controls.vtsc import vtsc
+# }} PFEIFER - VTSC
+
 LON_MPC_STEP = 0.2  # first step is 0.2s
 A_CRUISE_MIN = -1.2
 A_CRUISE_MAX_VALS = [1.6, 1.2, 0.8, 0.6]
@@ -129,6 +133,17 @@ class LongitudinalPlanner:
     accel_limits_turns[0] = min(accel_limits_turns[0], self.a_desired + 0.05)
     accel_limits_turns[1] = max(accel_limits_turns[1], self.a_desired - 0.05)
 
+    # PFEIFER - VTSC {{
+    enabled = not reset_state and self.CP.openpilotLongitudinalControl
+    vtsc.update(enabled, v_ego, self.a_desired, v_cruise, sm)
+    if vtsc.active:
+      original_v_cruise = v_cruise
+      a_target, v_cruise = vtsc.plan
+      if v_cruise < v_ego and original_v_cruise > v_cruise:
+        accel_limits_turns[0] = min(accel_limits_turns[0], a_target - 0.05)
+        accel_limits_turns[1] = min(accel_limits_turns[1], a_target)
+    # }} PFEIFER - VTSC
+
     self.mpc.set_weights(prev_accel_constraint, personality=self.personality)
     self.mpc.set_accel_limits(accel_limits_turns[0], accel_limits_turns[1])
     self.mpc.set_cur_state(self.v_desired_filter.x, self.a_desired)
diff --git a/selfdrive/controls/vtsc.py b/selfdrive/controls/vtsc.py
new file mode 100644
index 000000000..f2c8c569f
--- /dev/null
+++ b/selfdrive/controls/vtsc.py
@@ -0,0 +1,214 @@
+# PFEIFER - VTSC
+
+# Acknowledgements:
+# This code is a rewrite of the move-fast teams vtsc implementation. (https://github.com/move-fast/openpilot) Huge thanks to them for the initial implementation.
+# I also used sunnypilot as a reference. (https://github.com/sunnyhaibin/sunnypilot) Big thanks for sunny's amazing work
+
+import numpy as np
+from openpilot.common.numpy_fast import clip
+from openpilot.common.realtime import DT_MDL
+from time import time
+from openpilot.common.params import Params
+params = Params()
+
+Polynomial = np.polynomial.polynomial.Polynomial
+
+MAX_DIST = 5 # seconds. max distance to evaluate for
+MIN_DIST = 0.5 # seconds. max distance to evaluate for
+
+MIN_TARGET_DIST = 1.5 # seconds. min distance to use as an acceleration target
+MAX_TARGET_DIST = 5.0 # seconds. max distance to use as an acceleration target
+
+# Maximum rate of change of acceleration this controller will request
+MAX_JERK = 1.0 # m/s^3
+
+# The maximum this controller will request to decelerate
+MAX_DECEL = -2.5 # m/s^2
+
+TARGET_LAT_A = 2.4 # m/s^2
+
+MIN_TARGET_V = 5 # m/s
+
+
+def poly_x_for_y(poly, y):
+  """
+  Finds the x values that solve for y with a given polynomial.
+  """
+  return (poly - y).roots()
+
+def poly_points_to_curvature(poly, x_points):
+  """
+  This function takes a numpy Polynomial and points on the x axis and returns
+  the curve K at each point.
+
+  ref: https://math24.net/curvature-radius.html
+  curve at a point is defined as the mean curvature of the arc when the
+  displacement along the arc nears 0
+
+           lim       |  delta a  |
+  K = -------------- | --------- |
+       delta s -> 0  |  delta s  |
+
+  radius R is defined as inverse of the curvature K
+  R = 1 / K
+
+  Therefore:
+  K = 1 / R
+
+  R can be obtained when y is a function of x using the following equation:
+
+       ( 1 + y'(x)^2 ) ^ (3/2)
+  R = -------------------------
+             | y''(x) |
+
+  Therefore:
+            | y''(x) |
+  K = -------------------------
+       ( 1 + y'(x)^2 ) ^ (3/2)
+
+  """
+  dy = poly.deriv()
+  ddy = dy.deriv()
+  def point_to_curv(x):
+    k = abs(ddy(x)) / ((1 + dy(x)**2)**(3/2))
+    return k
+
+  return np.vectorize(point_to_curv)(x_points)
+
+class VisionTurnController():
+  def __init__(self):
+    self.op_enabled = False
+    self.gas_pressed = False
+    self.last_params_update = 0
+    self.v_cruise_setpoint = 0
+    self.v_ego = 0
+    self.a_ego = 0
+    self.a_target = 0
+    self.v_target = 0
+    self.enabled = params.get_bool("TurnVisionControl")
+    self.has_lead = False
+    self.last_update = time()
+    self.update_time_diff = DT_MDL # seconds, updated each update loop
+
+    self.reset()
+
+  @property
+  def active(self):
+    turn_limit_exceeded = self.v_target < self.v_cruise_setpoint
+    return self.op_enabled and not self.gas_pressed and self.enabled and turn_limit_exceeded and not self.has_lead
+
+  @property
+  def plan(self):
+    v_target = self.v_target if self.v_target < self.v_cruise_setpoint else self.v_cruise_setpoint
+    return (self.a_target, v_target)
+
+  def reset(self):
+    self.x_plan = []
+    self.y_plan = []
+
+  def update_params(self):
+    t = time()
+    if t > self.last_params_update + 5.0:
+      self.enabled = params.get_bool("TurnVisionControl")
+      self.last_params_update = t
+
+
+  def get_driving_path_poly(self):
+    """
+    Fits the points from the predicted driving path to a numpy polynomial function.
+    """
+    # Calculate curvature polynomial from predicted path
+    if len(self.x_plan) > 3:
+      return Polynomial.fit(self.x_plan, self.y_plan, 4)
+
+    return Polynomial([0, 0, 0, 0])
+
+  def update_current_state(self, sm):
+    """
+    Uses the current state of the car to calculate the curvature based off the
+    angle of the wheels and store the max acceptable velocity for the curve as
+    well as the current lateral acceleration.
+    """
+    self.has_lead = sm['radarState'].leadOne.status
+    now = time()
+    self.update_time_diff = now - self.last_update
+    self.last_update = now
+
+
+  def apply_limits(self):
+    # VTSC not needed or disabled, do not change targets
+    if not self.active:
+      self.a_target = self.a_ego
+      self.v_target = self.v_cruise_setpoint
+      return
+
+    if self.max_pred_lat_acc > TARGET_LAT_A:
+      self.a_target = max(self.a_target, MAX_DECEL)
+      self.v_target = min(self.v_target, self.v_cruise_setpoint) # Never request more velocity than the set max
+
+    # limit accel based on MAX_JERK
+    a_ego = min(self.a_ego, 0)
+    min_accel = a_ego - (MAX_JERK * self.update_time_diff)
+    max_accel = a_ego + (MAX_JERK * self.update_time_diff)
+    self.a_target = clip(self.a_target, min_accel, max_accel)
+
+
+  def update_calculations(self, sm):
+    self.update_current_state(sm)
+
+    # Fit the model's predicted path to polynomial
+    path_poly = self.get_driving_path_poly()
+
+    # Find distances on poly that match minimums/maximums
+    path_poly_d = path_poly.deriv()
+    eval_distances = poly_x_for_y(path_poly_d, 0)
+
+    # remove max/min values outside our distance bounds
+    min_dist = self.v_ego * MIN_DIST
+    max_dist = self.v_ego * MAX_DIST
+    eval_distances = [x for x in eval_distances if x > min_dist and x < max_dist]
+
+    # If the calculated distances are not within our bounds then we know our min or max dist will be the max curve
+    if len(eval_distances) == 0:
+      eval_distances = [MIN_DIST, MAX_DIST]
+
+    # Find curvature values from the predicted driving path
+    v_ego = max(self.v_ego, 0.1) # ensure a value greater than 0 for calculations
+    predicted_curvatures = poly_points_to_curvature(path_poly, eval_distances)
+    predicted_lat_accels = np.abs(predicted_curvatures * (v_ego**2))
+
+    # Find max lat accel
+    accel_idx = np.argmax(predicted_lat_accels)
+    self.max_pred_lat_acc = predicted_lat_accels[accel_idx]
+
+    # Get target velocity for curve
+    max_curve = predicted_curvatures[accel_idx]
+    self.v_target = (TARGET_LAT_A / max_curve) ** 0.5
+
+    # Get the target distance to hit the velocity at
+    min_target_dist = MIN_TARGET_DIST * v_ego
+    max_target_dist = MAX_TARGET_DIST * v_ego
+    target_dist = clip(eval_distances[accel_idx], min_target_dist, max_target_dist)
+
+    self.v_target = max(self.v_target, MIN_TARGET_V)
+
+    # calculate the target acceleration using the difference in velocity and the target distance
+    self.a_target = ((self.v_target ** 2) - (v_ego ** 2)) / (2 * target_dist)
+
+    # update targets based on limits
+    self.apply_limits()
+
+
+  def update(self, enabled, v_ego, a_ego, v_cruise_setpoint, sm):
+    self.op_enabled = enabled
+    self.gas_pressed = sm['carState'].gasPressed
+    self.v_ego = v_ego
+    self.a_ego = a_ego
+    self.v_cruise_setpoint = v_cruise_setpoint
+    self.x_plan = np.array(sm['modelV2'].position.x)[:17]
+    self.y_plan = np.array(sm['modelV2'].position.y)[:17]
+
+    self.update_params()
+    self.update_calculations(sm)
+
+vtsc = VisionTurnController()
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 669de5eae..995cbc2f7 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -71,6 +71,14 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - VTSC {{
+    {
+      "TurnVisionControl",
+      tr("V-TSC - Vision Turn Speed Control"),
+      tr("Enables V-TSC. When enabled, the car will slow down when it predicts a lateral acceleration greater than 2.0 m/s^2."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - VTSC
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
-- 
2.39.2

