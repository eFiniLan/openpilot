From 6247031e4b448f68c33b2e2db8ed99482ff78092 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Thu, 23 Nov 2023 21:25:32 -0500
Subject: [PATCH] mtsc

---
 common/params.cc                              |   5 +
 release/files_common                          |   2 +
 .../controls/lib/longitudinal_planner.py      |  10 ++
 selfdrive/controls/mtsc.py                    | 117 ++++++++++++++++++
 selfdrive/ui/qt/offroad/settings.cc           |   8 ++
 5 files changed, 142 insertions(+)
 create mode 100644 selfdrive/controls/mtsc.py

diff --git a/common/params.cc b/common/params.cc
index 54168165a..61ecbd13c 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -208,6 +208,11 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"Version", PERSISTENT},
     {"VisionRadarToggle", PERSISTENT},
     {"WheeledBody", PERSISTENT},
+
+    // PFEIFER - MTSC {{
+    {"MapTargetVelocities", PERSISTENT},
+    {"MTSCEnabled", PERSISTENT},
+    // }} PFEIFER - MTSC
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index cfc3830e0..1cd801cc8 100644
--- a/release/files_common
+++ b/release/files_common
@@ -600,3 +600,5 @@ tinygrad_repo/tinygrad/runtime/ops_disk.py
 tinygrad_repo/tinygrad/runtime/ops_gpu.py
 tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
+
+selfdrive/controls/mtsc.py
diff --git a/selfdrive/controls/lib/longitudinal_planner.py b/selfdrive/controls/lib/longitudinal_planner.py
index b1eff5302..1b0b8f91d 100755
--- a/selfdrive/controls/lib/longitudinal_planner.py
+++ b/selfdrive/controls/lib/longitudinal_planner.py
@@ -17,6 +17,10 @@ from openpilot.selfdrive.controls.lib.longitudinal_mpc_lib.long_mpc import T_IDX
 from openpilot.selfdrive.controls.lib.drive_helpers import V_CRUISE_MAX, CONTROL_N, get_speed_error
 from openpilot.system.swaglog import cloudlog
 
+# PFEIFER - MTSC {{
+from openpilot.selfdrive.controls.mtsc import mtsc
+# }} PFEIFER - MTSC
+
 LON_MPC_STEP = 0.2  # first step is 0.2s
 A_CRUISE_MIN = -1.2
 A_CRUISE_MAX_VALS = [1.6, 1.2, 0.8, 0.6]
@@ -129,6 +133,12 @@ class LongitudinalPlanner:
     accel_limits_turns[0] = min(accel_limits_turns[0], self.a_desired + 0.05)
     accel_limits_turns[1] = max(accel_limits_turns[1], self.a_desired - 0.05)
 
+    # PFEIFER - MTSC {{
+    mtsc_v = mtsc.target_speed(v_ego, sm['carState'].aEgo)
+    if v_cruise > mtsc_v and mtsc_v != 0:
+      v_cruise = mtsc_v
+    # }} PFEIFER - MTSC
+
     self.mpc.set_weights(prev_accel_constraint, personality=self.personality)
     self.mpc.set_accel_limits(accel_limits_turns[0], accel_limits_turns[1])
     self.mpc.set_cur_state(self.v_desired_filter.x, self.a_desired)
diff --git a/selfdrive/controls/mtsc.py b/selfdrive/controls/mtsc.py
new file mode 100644
index 000000000..42a173270
--- /dev/null
+++ b/selfdrive/controls/mtsc.py
@@ -0,0 +1,117 @@
+from openpilot.common.params import Params
+from openpilot.common.conversions import Conversions as CV
+import json
+import math
+from openpilot.common.numpy_fast import interp
+from time import time
+
+mem_params = Params("/dev/shm/params")
+params = Params()
+
+R = 6373000.0 # approximate radius of earth in meters
+TO_RADIANS = math.pi / 180
+TO_DEGREES = 180 / math.pi
+TARGET_JERK = -1.0 # m/s^3 should match up with the long planner
+MIN_ACCEL = -3.5 # m/s^2 should match up with the long planner
+
+# points should be in radians
+# output is meters
+def distance_to_point(ax, ay, bx, by):
+  a = math.sin((bx-ax)/2)*math.sin((bx-ax)/2) + math.cos(ax) * math.cos(bx)*math.sin((by-ay)/2)*math.sin((by-ay)/2)
+  c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
+
+  return R * c  # in meters
+
+class MapTurnSpeedController:
+  def __init__(self):
+    self.enabled = params.get_bool("MTSCEnabled")
+    self.last_params_update = time()
+
+  def update_params(self):
+    t = time()
+    if t > self.last_params_update + 5.0:
+      self.enabled = params.get_bool("MTSCEnabled")
+      self.last_params_update = t
+
+  def target_speed(self, v_ego, a_ego) -> float:
+    self.update_params()
+
+    if not self.enabled:
+      return 0.0
+
+    lat = 0.0
+    lon = 0.0
+    try:
+      position = json.loads(mem_params.get("LastGPSPosition"))
+      lat = position["latitude"]
+      lon = position["longitude"]
+    except: return 0.0
+
+    try:
+      target_velocities = json.loads(mem_params.get("MapTargetVelocities"))
+    except: return 0.0
+
+    min_dist = 1000
+    min_idx = 0
+    distances = []
+
+    # find our location in the path
+    for i in range(len(target_velocities)):
+      target_velocity = target_velocities[i]
+      tlat = target_velocity["latitude"]
+      tlon = target_velocity["longitude"]
+      d = distance_to_point(lat * TO_RADIANS, lon * TO_RADIANS, tlat * TO_RADIANS, tlon * TO_RADIANS)
+      distances.append(d)
+      if d < min_dist:
+        min_dist = d
+        min_idx = i
+
+    # only look at values from our current position forward
+    forward_points = target_velocities[min_idx:]
+    forward_distances = distances[min_idx:]
+
+    # find velocities that we are within the distance we need to adjust for
+    valid_velocities = []
+    for i in range(len(forward_points)):
+      target_velocity = forward_points[i]
+      tlat = target_velocity["latitude"]
+      tlon = target_velocity["longitude"]
+      tv = target_velocity["velocity"]
+      if tv > v_ego:
+        continue
+
+      d = forward_distances[i]
+      min_accel_t = max(0.1, (MIN_ACCEL - a_ego) / TARGET_JERK) # seconds to reach min accel
+      min_jerk_v = 0.5 * TARGET_JERK * min_accel_t ** 2 + a_ego + v_ego # the minimum v we can reach before hitting the min accel limit
+      t = 0.0
+      if tv > min_jerk_v:
+        # calculate time needed based on jerk
+        a = 0.5 * TARGET_JERK
+        b = a_ego
+        c = v_ego - tv
+        t_a = (-1 * b - math.sqrt((b ** 2) - 4 * a * c)) / (2 * a)
+        t_b = (-1 * b + math.sqrt((b ** 2) - 4 * a * c)) / (2 * a)
+        if t_a > 0:
+          t = t_a
+        else:
+          t = t_b
+      else:
+        # calculate time needed based on hitting the min accel
+        t = min_accel_t + ((min_jerk_v - tv) / (-1 * MIN_ACCEL))
+
+      # Adjust slightly early so we get to the speed before hitting the curve
+      t += 3.0
+      max_d = t * v_ego
+      if d < max_d:
+        valid_velocities.append(float(tv))
+
+    # Find the smallest velocity we need to adjust for
+    min_v = 100.0
+    for tv in valid_velocities:
+      if tv < min_v:
+        min_v = tv
+
+
+    return min_v
+
+mtsc = MapTurnSpeedController()
diff --git a/selfdrive/ui/qt/offroad/settings.cc b/selfdrive/ui/qt/offroad/settings.cc
index 669de5eae..9e0f9d076 100644
--- a/selfdrive/ui/qt/offroad/settings.cc
+++ b/selfdrive/ui/qt/offroad/settings.cc
@@ -71,6 +71,14 @@ TogglesPanel::TogglesPanel(SettingsWindow *parent) : ListWidget(parent) {
       tr("Display speed in km/h instead of mph."),
       "../assets/offroad/icon_metric.png",
     },
+    // PFEIFER - MTSC {{
+    {
+      "MTSCEnabled",
+      tr("M-TSC - Map Turn Speed Control"),
+      tr("Enables M-TSC. When enabled, the car will slow down when it predicts a lateral acceleration greater than 2.0 m/s^2."),
+      "../assets/img_experimental_white.svg",
+    },
+    // }} PFEIFER - MTSC
 #ifdef ENABLE_MAPS
     {
       "NavSettingTime24h",
-- 
2.39.2

