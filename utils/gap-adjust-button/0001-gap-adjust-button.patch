From 18e86b743b4f1c94a484c6461762750afcf0c4b6 Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Sat, 24 Jun 2023 17:59:36 -0400
Subject: [PATCH] gap adjust button

---
 common/params.cc                        |  4 ++++
 release/files_common                    |  1 +
 selfdrive/car/gm/carstate.py            |  9 +++++++++
 selfdrive/car/hyundai/interface.py      |  9 +++++++++
 selfdrive/car/toyota/carstate.py        | 12 ++++++++++++
 selfdrive/controls/gap_adjust_button.py | 13 +++++++++++++
 6 files changed, 48 insertions(+)
 create mode 100644 selfdrive/controls/gap_adjust_button.py

diff --git a/common/params.cc b/common/params.cc
index 63baa3031..89b03846f 100644
--- a/common/params.cc
+++ b/common/params.cc
@@ -207,6 +207,10 @@ std::unordered_map<std::string, uint32_t> keys = {
     {"Version", PERSISTENT},
     {"VisionRadarToggle", PERSISTENT},
     {"WheeledBody", PERSISTENT},
+
+    // PFEIFER - GAB {{
+    {"GapAdjustButton", PERSISTENT},
+    // }} PFEIFER - GAB
 };
 
 } // namespace
diff --git a/release/files_common b/release/files_common
index 5272b6154..58d593000 100644
--- a/release/files_common
+++ b/release/files_common
@@ -602,3 +602,4 @@ tinygrad_repo/tinygrad/shape/*
 tinygrad_repo/tinygrad/*.py
 
 selfdrive/controls/button_manager.py
+selfdrive/controls/gap_adjust_button.py
diff --git a/selfdrive/car/gm/carstate.py b/selfdrive/car/gm/carstate.py
index 8585e9f20..ae9c591e0 100644
--- a/selfdrive/car/gm/carstate.py
+++ b/selfdrive/car/gm/carstate.py
@@ -7,6 +7,10 @@ from opendbc.can.parser import CANParser
 from openpilot.selfdrive.car.interfaces import CarStateBase
 from openpilot.selfdrive.car.gm.values import DBC, AccState, CanBus, STEER_THRESHOLD
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 TransmissionType = car.CarParams.TransmissionType
 NetworkLocation = car.CarParams.NetworkLocation
 STANDSTILL_THRESHOLD = 10 * 0.0311 * CV.KPH_TO_MS
@@ -29,6 +33,11 @@ class CarState(CarStateBase):
   def update(self, pt_cp, cam_cp, loopback_cp):
     ret = car.CarState.new_message()
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = pt_cp.vl["ASCMSteeringButton"]["DistanceButton"] != 0
+    gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     self.prev_cruise_buttons = self.cruise_buttons
     self.cruise_buttons = pt_cp.vl["ASCMSteeringButton"]["ACCButtons"]
     self.buttons_counter = pt_cp.vl["ASCMSteeringButton"]["RollingCounter"]
diff --git a/selfdrive/car/hyundai/interface.py b/selfdrive/car/hyundai/interface.py
index c5537993d..40b9635ae 100644
--- a/selfdrive/car/hyundai/interface.py
+++ b/selfdrive/car/hyundai/interface.py
@@ -10,6 +10,10 @@ from openpilot.selfdrive.car import create_button_events, get_safety_config
 from openpilot.selfdrive.car.interfaces import CarInterfaceBase
 from openpilot.selfdrive.car.disable_ecu import disable_ecu
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 Ecu = car.CarParams.Ecu
 ButtonType = car.CarState.ButtonEvent.Type
 EventName = car.CarEvent.EventName
@@ -335,6 +339,11 @@ class CarInterface(CarInterfaceBase):
     if self.CS.CP.openpilotLongitudinalControl:
       ret.buttonEvents = create_button_events(self.CS.cruise_buttons[-1], self.CS.prev_cruise_buttons, BUTTONS_DICT)
 
+    # PFEIFER - GAB {{
+    gap_button_pressed = (self.CS.cruise_buttons[-1] == Buttons.GAP_DIST)
+    gap_adjust_button.update(gap_button_pressed)
+    # }} PFEIFER - GAB
+
     # On some newer model years, the CANCEL button acts as a pause/resume button based on the PCM state
     # To avoid re-engaging when openpilot cancels, check user engagement intention via buttons
     # Main button also can trigger an engagement on these cars
diff --git a/selfdrive/car/toyota/carstate.py b/selfdrive/car/toyota/carstate.py
index 076668fff..ef7d498a0 100644
--- a/selfdrive/car/toyota/carstate.py
+++ b/selfdrive/car/toyota/carstate.py
@@ -11,6 +11,10 @@ from openpilot.selfdrive.car.interfaces import CarStateBase
 from openpilot.selfdrive.car.toyota.values import ToyotaFlags, CAR, DBC, STEER_THRESHOLD, NO_STOP_TIMER_CAR, \
                                                   TSS2_CAR, RADAR_ACC_CAR, EPS_SCALE, UNSUPPORTED_DSU_CAR
 
+# PFEIFER - GAB {{
+from openpilot.selfdrive.controls.gap_adjust_button import gap_adjust_button
+# }} PFEIFER - GAB
+
 SteerControlType = car.CarParams.SteerControlType
 
 # These steering fault definitions seem to be common across LKA (torque) and LTA (angle):
@@ -163,6 +167,14 @@ class CarState(CarStateBase):
     if self.CP.carFingerprint != CAR.PRIUS_V:
       self.lkas_hud = copy.copy(cp_cam.vl["LKAS_HUD"])
 
+    # PFEIFER - GAB {{
+    distance_button_pressed = False
+    if self.CP.carFingerprint in TSS2_CAR:
+      if 'DISTANCE' in cp_acc.vl["ACC_CONTROL"]:
+        distance_button_pressed = cp_acc.vl["ACC_CONTROL"]["DISTANCE"] == 1
+        gap_adjust_button.update(distance_button_pressed)
+    # }} PFEIFER - GAB
+
     return ret
 
   @staticmethod
diff --git a/selfdrive/controls/gap_adjust_button.py b/selfdrive/controls/gap_adjust_button.py
new file mode 100644
index 000000000..f34ff3a7f
--- /dev/null
+++ b/selfdrive/controls/gap_adjust_button.py
@@ -0,0 +1,13 @@
+# PFEIFER - GAB
+
+# Acknowledgements:
+# HKG button state was pulled from sunnypilot. https://github.com/sunnyhaibin/sunnypilot
+# GM button state was pulled from OPGM. https://github.com/opgm/openpilot
+# Toyota button state was pulled from Frogpilot who pulled it from krkeegan. https://github.com/FrogAi/FrogPilot | https://github.com/krkeegan/openpilot
+
+from openpilot.selfdrive.controls.button_manager import Button, ButtonState
+
+# export button state so only one import is necessary
+GapButtonState = ButtonState
+
+gap_adjust_button = Button("GapAdjustButton")
-- 
2.39.2

