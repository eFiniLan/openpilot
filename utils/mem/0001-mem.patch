From 45d04bdc03cdeae0e61cd919a8196cca7167255b Mon Sep 17 00:00:00 2001
From: Jacob Pfeifer <jacob@pfeifer.dev>
Date: Tue, 18 Apr 2023 22:48:21 -0400
Subject: [PATCH] mem

---
 selfdrive/mem.py | 71 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 71 insertions(+)
 create mode 100644 selfdrive/mem.py

diff --git a/selfdrive/mem.py b/selfdrive/mem.py
new file mode 100644
index 000000000..a088ccd7f
--- /dev/null
+++ b/selfdrive/mem.py
@@ -0,0 +1,71 @@
+from io import TextIOWrapper
+import json
+from typing import Any
+from time import sleep, time
+from os import remove
+from os.path import getmtime
+
+LOCK_TIMEOUT = 0.1 # seconds. Time before forceably removing lock file
+
+
+MEM_PATH = "/dev/shm/"
+MEM_PREFIX = "__"
+
+def check_lock(path: str):
+  try:
+    now = time()
+    mtime = getmtime(path)
+    if now - mtime > LOCK_TIMEOUT:
+      remove(path)
+  except: pass
+
+def lock(path: str) -> TextIOWrapper:
+  mem_lock = None
+  while mem_lock is None:
+    try:
+      mem_lock = open(path, "x")
+    except:
+      check_lock(path)
+      sleep(0.001)
+  return mem_lock
+
+def unlock(path: str, file: TextIOWrapper):
+  file.close()
+  try:
+    remove(path)
+  except: pass
+
+
+
+def get(name: str) -> Any:
+  path = MEM_PATH + MEM_PREFIX + name
+  lock_path = path + ".lock"
+  mem_lock = None
+
+  try:
+    mem_lock = lock(lock_path)
+
+    mem_f = open(path, "r+")
+    data = json.loads(mem_f.read())
+    mem_f.close()
+    unlock(lock_path, mem_lock)
+    return data
+  except:
+    if mem_lock is not None:
+      unlock(lock_path, mem_lock)
+    return None
+
+
+def update(name: str, data: Any):
+  path = MEM_PATH + MEM_PREFIX + name
+  lock_path = path + ".lock"
+  mem_lock = None
+  try:
+    mem_lock = lock(lock_path)
+    mem_f = open(path, "w+")
+    mem_f.write(json.dumps(data))
+    mem_f.close()
+    unlock(lock_path, mem_lock)
+  except:
+    if mem_lock is not None:
+      unlock(lock_path, mem_lock)
-- 
2.40.0

